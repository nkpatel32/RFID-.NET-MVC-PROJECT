@model RFID_.NET_MVC_PROJECT.Models.getCtIdAndSubjectName
@{
    Layout = "~/Views/UserPanal/_UserLayout.cshtml";
    ViewData["Title"] = "User Subject";
}

<div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Left Panel -->
        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-bold mb-4">Attendance for @Model.subject_name (@Model.ct_id)</h2>

            <div class="grid grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="fromDate" class="block text-sm font-medium mb-1">From Date:</label>
                    <div class="relative">
                        <input type="date" id="fromDate" name="fromDate" class="w-full border rounded px-3 py-2" value="01-02-2024">
                        <span class="absolute right-2 top-2 text-gray-500">
                            <i class="far fa-calendar"></i>
                        </span>
                    </div>
                </div>
                <div>
                    <label for="toDate" class="block text-sm font-medium mb-1">To Date:</label>
                    <div class="relative">
                        <input type="date" id="toDate" name="toDate" class="w-full border rounded px-3 py-2" value="01-04-2025">
                        <span class="absolute right-2 top-2 text-gray-500">
                            <i class="far fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Dynamic Calendar -->
            <div class="border rounded mb-4">
                <div class="flex justify-between items-center p-2 bg-gray-100">
                    <button id="prevYear" class="px-3 py-1">&laquo;</button>
                    <button id="prevMonth" class="px-3 py-1">&lsaquo;</button>
                    <span id="currentMonthYear" class="font-medium">March 2025</span>
                    <button id="nextMonth" class="px-3 py-1">&rsaquo;</button>
                    <button id="nextYear" class="px-3 py-1">&raquo;</button>
                </div>

                <table class="w-full text-center">
                    <thead>
                        <tr>
                            <th class="py-2">MON</th>
                            <th class="py-2">TUE</th>
                            <th class="py-2">WED</th>
                            <th class="py-2">THU</th>
                            <th class="py-2">FRI</th>
                            <th class="py-2">SAT</th>
                            <th class="py-2 text-red-500">SUN</th>
                        </tr>
                    </thead>
                    <tbody id="calendarBody">
                        <!-- Calendar will be dynamically populated here -->
                    </tbody>
                </table>
            </div>

            <!-- Attendance Data for Selected Date -->
            <h3 id="selectedDateTitle" class="font-bold mb-2">Attendance on 2025-04-02</h3>
            <div class="border rounded">
                <div class="bg-gray-100 p-3 font-semibold">
                    Time
                </div>
                <div class="p-4 max-h-64 overflow-y-auto">
                    <table id="punchTable" class="w-full border-collapse">
                        <thead>
                            <tr>
                                <th class="border px-4 py-2">Punch ID</th>
                                <th class="border px-4 py-2">Timestamp</th>
                                <th class="border px-4 py-2">User ID</th>
                            </tr>
                        </thead>
                        <tbody id="punchTableBody">
                            <!-- Punch data will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Right Panel -->
        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-bold mb-4">Attendance Overview</h2>

            <div class="h-64 flex justify-center items-center mb-4">
                <!-- Chart container -->
                <div class="w-full">
                    <canvas id="attendanceChart" height="250"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Global variables
    let currentDate = new Date();
    let attendanceData = [];
    let selectedDate = new Date();
    let attendanceChart;
    const ctId = "@Model.ct_id";

    // Initialize page
    document.addEventListener('DOMContentLoaded', function () {
        // Set default dates (3 months range)
        const today = new Date();
        const threeMonthsAgo = new Date();
        threeMonthsAgo.setMonth(today.getMonth() - 3);

        document.getElementById('fromDate').valueAsDate = threeMonthsAgo;
        document.getElementById('toDate').valueAsDate = today;

        // Initialize chart
        initializeChart();

        // Generate initial calendar
        renderCalendar(currentDate);

        // Fetch initial data
        fetchAttendanceData();

        // Add event listeners
        document.getElementById("fromDate").addEventListener("change", fetchAttendanceData);
        document.getElementById("toDate").addEventListener("change", fetchAttendanceData);
        document.getElementById("prevMonth").addEventListener("click", navigateToPrevMonth);
        document.getElementById("nextMonth").addEventListener("click", navigateToNextMonth);
        document.getElementById("prevYear").addEventListener("click", navigateToPrevYear);
        document.getElementById("nextYear").addEventListener("click", navigateToNextYear);
    });

    // Initialize chart with empty data
    function initializeChart() {
        const ctx = document.getElementById('attendanceChart').getContext('2d');
        attendanceChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Present', 'Absent'],
                datasets: [{
                    label: 'Attendance Overview',
                    data: [0, 0],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.8)',
                        'rgba(255, 99, 132, 0.8)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Attendance Overview'
                    }
                }
            }
        });
    }

    // Calendar navigation functions
    function navigateToPrevMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar(currentDate);
    }

    function navigateToNextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar(currentDate);
    }

    function navigateToPrevYear() {
        currentDate.setFullYear(currentDate.getFullYear() - 1);
        renderCalendar(currentDate);
    }

    function navigateToNextYear() {
        currentDate.setFullYear(currentDate.getFullYear() + 1);
        renderCalendar(currentDate);
    }

    // Render calendar for a given month
    function renderCalendar(date) {
        const year = date.getFullYear();
        const month = date.getMonth();

        // Update month/year display
        const monthNames = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"];
        document.getElementById('currentMonthYear').textContent = `${monthNames[month]} ${year}`;

        // Get first day of month and total days
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const totalDays = lastDay.getDate();

        // Get day of week for first day (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        // Convert to Monday-based (0 = Monday, ..., 6 = Sunday)
        let firstDayOfWeek = firstDay.getDay() - 1;
        if (firstDayOfWeek < 0) firstDayOfWeek = 6; // Sunday becomes 6

        // Get last day of previous month
        const prevMonthLastDay = new Date(year, month, 0).getDate();

        let calendarHTML = '';
        let dayCounter = 1;
        let nextMonthDay = 1;

        // Create weeks
        for (let i = 0; i < 6; i++) {
            // Skip rendering empty weeks
            if (i > 0 && dayCounter > totalDays) break;

            calendarHTML += '<tr>';

            // Create days in a week
            for (let j = 0; j < 7; j++) {
                // Days from previous month
                if (i === 0 && j < firstDayOfWeek) {
                    const prevDay = prevMonthLastDay - (firstDayOfWeek - j - 1);
                    calendarHTML += `<td class="py-2 text-gray-500">${prevDay}</td>`;
                }
                // Days from next month
                else if (dayCounter > totalDays) {
                    calendarHTML += `<td class="py-2 text-gray-500">${nextMonthDay}</td>`;
                    nextMonthDay++;
                }
                // Days from current month
                else {
                    // Check if this day has attendance data
                    const currentDateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(dayCounter).padStart(2, '0')}`;
                    const hasAttendance = checkAttendanceForDate(currentDateStr);

                    // Weekend styles
                    // Weekend styles
                    const isWeekend = (j === 5 || j === 6);  // Saturday or Sunday
                    let dayClass = isWeekend ? 'text-black' : '';  // Change text color for Saturday to black

                    // Selected date style
                    if (isSelectedDate(year, month, dayCounter)) {
                        dayClass = 'bg-blue-500 text-white';
                    }
                    // Has attendance style
                    else if (hasAttendance) {
                        dayClass = 'bg-green-500 text-white';
                    }

                    calendarHTML += `<td class="py-2 ${dayClass} cursor-pointer day-cell"
                                                data-date="${currentDateStr}"
                                                onclick="selectDate('${currentDateStr}')">${dayCounter}</td>`;
                    dayCounter++;
                }
            }

            calendarHTML += '</tr>';
        }

        document.getElementById('calendarBody').innerHTML = calendarHTML;
    }

    // Check if a specific date has attendance records
    function checkAttendanceForDate(dateStr) {
        if (!attendanceData || !attendanceData.length) return false;

        return attendanceData.some(record => {
            const recordDate = new Date(record.timestamp).toISOString().split('T')[0];
            return recordDate === dateStr;
        });
    }

    // Check if date is the currently selected date
    function isSelectedDate(year, month, day) {
        return selectedDate.getFullYear() === year &&
            selectedDate.getMonth() === month &&
            selectedDate.getDate() === day;
    }

    // Select a date and show its punch details
    function selectDate(dateStr) {
        selectedDate = new Date(dateStr);
        document.getElementById('selectedDateTitle').textContent = `Attendance on ${dateStr}`;

        // Re-render calendar to update selected date highlighting
        renderCalendar(currentDate);

        // Filter punch data for selected date
        const punchesForDate = attendanceData.filter(record => {
            const recordDate = new Date(record.timestamp).toISOString().split('T')[0];
            return recordDate === dateStr;
        });

        // Update punch table
        const tableBody = document.getElementById('punchTableBody');
        tableBody.innerHTML = '';

        if (punchesForDate.length > 0) {
            punchesForDate.forEach(punch => {
                const row = document.createElement('tr');

                const punchIdCell = document.createElement('td');
                punchIdCell.className = 'border px-4 py-2';
                punchIdCell.textContent = punch.punch_id;

                const timestampCell = document.createElement('td');
                timestampCell.className = 'border px-4 py-2';
                // Format timestamp for better readability
                const punchDate = new Date(punch.timestamp);
                timestampCell.textContent = punchDate.toLocaleString();

                const userIdCell = document.createElement('td');
                userIdCell.className = 'border px-4 py-2';
                userIdCell.textContent = punch.user_id;

                row.appendChild(punchIdCell);
                row.appendChild(timestampCell);
                row.appendChild(userIdCell);
                tableBody.appendChild(row);
            });
        } else {
            const row = document.createElement('tr');
            const cell = document.createElement('td');
            cell.colSpan = 3;
            cell.className = 'border px-4 py-2 text-center';
            cell.textContent = 'No attendance records for this date';
            row.appendChild(cell);
            tableBody.appendChild(row);
        }
    }

    // Fetch attendance data from server
    function fetchAttendanceData() {
        const fromDate = document.getElementById("fromDate").value;
        const toDate = document.getElementById("toDate").value;

        if (!fromDate || !toDate) return;

        fetch(`@Url.Action("GetAttendanceforUser", "User")?ct_id=${ctId}&from_date=${fromDate}&to_date=${toDate}`)
            .then(response => response.json())
            .then(data => {
                console.log("Success:", data);
                attendanceData = data.data || [];

                // Update calendar
                renderCalendar(currentDate);

                // Update chart with attendance statistics
                updateAttendanceChart();

                // Set initial selected date if we have data
                if (attendanceData.length > 0) {
                    // Get the most recent attendance date
                    const sortedDates = [...attendanceData].sort((a, b) =>
                        new Date(b.timestamp) - new Date(a.timestamp));
                    const latestDate = new Date(sortedDates[0].timestamp);

                    // Set as selected date
                    selectedDate = latestDate;
                    selectDate(latestDate.toISOString().split('T')[0]);
                }
            })
            .catch(error => {
                console.error("Error:", error);
            });
    }

    // Update attendance chart with statistics
    function updateAttendanceChart() {
        // Count unique dates with attendance
        const attendanceDates = new Set();
        attendanceData.forEach(record => {
            const recordDate = new Date(record.timestamp).toISOString().split('T')[0];
            attendanceDates.add(recordDate);
        });

        // Calculate date range
        const fromDate = new Date(document.getElementById("fromDate").value);
        const toDate = new Date(document.getElementById("toDate").value);

        // Calculate total possible attendance days (excluding weekends)
        let totalDays = 0;
        let currentDate = new Date(fromDate);

        while (currentDate <= toDate) {
            // Skip weekends (0 = Sunday, 6 = Saturday)
            const dayOfWeek = currentDate.getDay();
            if (dayOfWeek !== 0 && dayOfWeek !== 6) {
                totalDays++;
            }

            // Move to next day
            currentDate.setDate(currentDate.getDate() + 1);
        }

        const presentDays = attendanceDates.size;
        const absentDays = Math.max(0, totalDays - presentDays);

        // Update chart data
        attendanceChart.data.datasets[0].data = [presentDays, absentDays];
        attendanceChart.update();
    }
</script>